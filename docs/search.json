[
  {
    "objectID": "Lab8.html",
    "href": "Lab8.html",
    "title": "Lab 8: Machine Learning The Whole Game Plan",
    "section": "",
    "text": "Load in necessary packages\n\nlibrary(tidyverse)\n\nWarning: package 'lubridate' was built under R version 4.4.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.2\n✔ recipes      1.1.1     \n\n\nWarning: package 'recipes' was built under R version 4.4.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n\nlibrary(powerjoin)\n\nWarning: package 'powerjoin' was built under R version 4.4.3\n\nlibrary(glue)\nlibrary(vip)\n\nWarning: package 'vip' was built under R version 4.4.3\n\n\n\nAttaching package: 'vip'\n\nThe following object is masked from 'package:utils':\n\n    vi\n\nlibrary(baguette)\n\nWarning: package 'baguette' was built under R version 4.4.3\n\nlibrary(ggplot2)\nlibrary(ggpubr)\n\nWarning: package 'ggpubr' was built under R version 4.4.3\n\nlibrary(dplyr)\nlibrary(visdat)\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.4.3\n\nlibrary (powerjoin)\n\n\n\nRead in CAMELS data\n\n# Read in Data from CAMELS data set\n\nroot  &lt;- 'https://gdex.ucar.edu/dataset/camels/file'\n\n# Documentation PDF \ndownload.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', 'data/camels_attributes_v2.0.pdf')\n\n# Vector storing data types/files\ntypes &lt;- c(\"clim\", \"geol\", \"soil\", \"topo\", \"vege\", \"hydro\")\n\n# Where the files live online ...\nremote_files  &lt;- glue('{root}/camels_{types}.txt')\n\n# Where we want to download the data ...\nlocal_files   &lt;- glue('data/camels_{types}.txt')\n\n# Download more data\n\nwalk2(remote_files, local_files, download.file, quiet = TRUE)\n\n# Read and merge data\n\ncamels &lt;- map(local_files, read_delim, show_col_types = FALSE) \n\n# Full join of data\n\ncamels &lt;- power_full_join(camels ,by = 'gauge_id')\n\n\n\nClean Data\n\n# Summary data \nsummary(camels)\n\n   gauge_id             p_mean          pet_mean     p_seasonality     \n Length:671         Min.   :0.6446   Min.   :1.899   Min.   :-1.43546  \n Class :character   1st Qu.:2.3731   1st Qu.:2.335   1st Qu.:-0.26352  \n Mode  :character   Median :3.2295   Median :2.688   Median : 0.08093  \n                    Mean   :3.2577   Mean   :2.787   Mean   :-0.04128  \n                    3rd Qu.:3.7835   3rd Qu.:3.146   3rd Qu.: 0.22399  \n                    Max.   :8.9369   Max.   :4.744   Max.   : 0.92202  \n                                                                       \n   frac_snow          aridity       high_prec_freq  high_prec_dur  \n Min.   :0.00000   Min.   :0.2203   Min.   : 7.90   Min.   :1.075  \n 1st Qu.:0.03514   1st Qu.:0.6957   1st Qu.:18.50   1st Qu.:1.209  \n Median :0.09793   Median :0.8551   Median :22.00   Median :1.282  \n Mean   :0.17760   Mean   :1.0565   Mean   :20.93   Mean   :1.350  \n 3rd Qu.:0.22306   3rd Qu.:1.2673   3rd Qu.:24.23   3rd Qu.:1.440  \n Max.   :0.90633   Max.   :5.2079   Max.   :32.70   Max.   :2.091  \n                                                                   \n high_prec_timing   low_prec_freq    low_prec_dur    low_prec_timing   \n Length:671         Min.   :169.9   Min.   : 2.789   Length:671        \n Class :character   1st Qu.:232.7   1st Qu.: 4.241   Class :character  \n Mode  :character   Median :255.8   Median : 4.950   Mode  :character  \n                    Mean   :254.6   Mean   : 5.954                     \n                    3rd Qu.:278.9   3rd Qu.: 6.702                     \n                    Max.   :348.7   Max.   :36.513                     \n                                                                       \n geol_1st_class     glim_1st_class_frac geol_2nd_class     glim_2nd_class_frac\n Length:671         Min.   :0.2967      Length:671         Min.   :0.000000   \n Class :character   1st Qu.:0.6083      Class :character   1st Qu.:0.002894   \n Mode  :character   Median :0.8294      Mode  :character   Median :0.136540   \n                    Mean   :0.7855                         Mean   :0.155426   \n                    3rd Qu.:0.9971                         3rd Qu.:0.266373   \n                    Max.   :1.0000                         Max.   :0.489930   \n                                                                              \n carbonate_rocks_frac geol_porostiy     geol_permeability soil_depth_pelletier\n Min.   :0.00000      Min.   :0.01000   Min.   :-16.50    Min.   : 0.2667     \n 1st Qu.:0.00000      1st Qu.:0.06767   1st Qu.:-14.77    1st Qu.: 1.0000     \n Median :0.00000      Median :0.13190   Median :-13.96    Median : 1.2283     \n Mean   :0.11874      Mean   :0.12637   Mean   :-13.89    Mean   :10.8728     \n 3rd Qu.:0.04333      3rd Qu.:0.18623   3rd Qu.:-13.00    3rd Qu.:12.8894     \n Max.   :1.00000      Max.   :0.28000   Max.   :-10.90    Max.   :50.0000     \n                      NA's   :3                                               \n soil_depth_statsgo soil_porosity    soil_conductivity max_water_content\n Min.   :0.3999     Min.   :0.3733   Min.   : 0.4469   Min.   :0.0866   \n 1st Qu.:1.1054     1st Qu.:0.4309   1st Qu.: 0.9321   1st Qu.:0.4293   \n Median :1.4577     Median :0.4422   Median : 1.3477   Median :0.5579   \n Mean   :1.2932     Mean   :0.4426   Mean   : 1.7405   Mean   :0.5280   \n 3rd Qu.:1.5000     3rd Qu.:0.4554   3rd Qu.: 1.9323   3rd Qu.:0.6450   \n Max.   :1.5000     Max.   :0.6800   Max.   :13.9557   Max.   :1.0520   \n                                                                        \n   sand_frac        silt_frac        clay_frac        water_frac     \n Min.   : 8.184   Min.   : 2.985   Min.   : 1.846   Min.   : 0.0000  \n 1st Qu.:25.437   1st Qu.:23.947   1st Qu.:13.999   1st Qu.: 0.0000  \n Median :35.269   Median :34.059   Median :18.663   Median : 0.0000  \n Mean   :36.468   Mean   :33.859   Mean   :19.886   Mean   : 0.1017  \n 3rd Qu.:44.457   3rd Qu.:43.639   3rd Qu.:25.420   3rd Qu.: 0.0000  \n Max.   :91.976   Max.   :67.775   Max.   :50.354   Max.   :19.3545  \n                                                                     \n  organic_frac       other_frac       gauge_lat       gauge_lon      \n Min.   : 0.0000   Min.   : 0.000   Min.   :27.05   Min.   :-124.39  \n 1st Qu.: 0.0000   1st Qu.: 0.000   1st Qu.:35.70   1st Qu.:-110.41  \n Median : 0.0000   Median : 1.309   Median :39.25   Median : -92.78  \n Mean   : 0.5918   Mean   : 9.825   Mean   :39.24   Mean   : -95.79  \n 3rd Qu.: 0.0000   3rd Qu.:11.737   3rd Qu.:43.21   3rd Qu.: -81.77  \n Max.   :57.8631   Max.   :99.378   Max.   :48.82   Max.   : -67.94  \n                                                                     \n   elev_mean         slope_mean        area_gages2       area_geospa_fabric\n Min.   :  10.21   Min.   :  0.8222   Min.   :    4.03   Min.   :    4.1   \n 1st Qu.: 249.67   1st Qu.:  7.4268   1st Qu.:  122.28   1st Qu.:  128.0   \n Median : 462.72   Median : 28.8016   Median :  329.68   Median :  340.7   \n Mean   : 759.42   Mean   : 46.1953   Mean   :  792.62   Mean   :  808.1   \n 3rd Qu.: 928.88   3rd Qu.: 73.1695   3rd Qu.:  794.29   3rd Qu.:  804.5   \n Max.   :3571.18   Max.   :255.6884   Max.   :25791.04   Max.   :25817.8   \n                                                                           \n  frac_forest        lai_max          lai_diff         gvf_max      \n Min.   :0.0000   Min.   :0.3671   Min.   :0.1544   Min.   :0.1843  \n 1st Qu.:0.2771   1st Qu.:1.8143   1st Qu.:1.1968   1st Qu.:0.6086  \n Median :0.8137   Median :3.3713   Median :2.3365   Median :0.7803  \n Mean   :0.6395   Mean   :3.2160   Mean   :2.4486   Mean   :0.7221  \n 3rd Qu.:0.9724   3rd Qu.:4.6963   3rd Qu.:3.7574   3rd Qu.:0.8649  \n Max.   :1.0000   Max.   :5.5821   Max.   :4.8315   Max.   :0.9157  \n                                                                    \n    gvf_diff      dom_land_cover_frac dom_land_cover     root_depth_50   \n Min.   :0.0290   Min.   :0.3145      Length:671         Min.   :0.1200  \n 1st Qu.:0.1883   1st Qu.:0.6511      Class :character   1st Qu.:0.1654  \n Median :0.3160   Median :0.8582      Mode  :character   Median :0.1800  \n Mean   :0.3227   Mean   :0.8100                         Mean   :0.1788  \n 3rd Qu.:0.4627   3rd Qu.:0.9967                         3rd Qu.:0.1900  \n Max.   :0.6522   Max.   :1.0000                         Max.   :0.2500  \n                                                         NA's   :24      \n root_depth_99       q_mean          runoff_ratio        slope_fdc     \n Min.   :1.500   Min.   :0.004553   Min.   :0.004238   Min.   :0.0000  \n 1st Qu.:1.522   1st Qu.:0.632918   1st Qu.:0.242443   1st Qu.:0.8978  \n Median :1.800   Median :1.131818   Median :0.350664   Median :1.2829  \n Mean   :1.830   Mean   :1.493967   Mean   :0.387146   Mean   :1.2372  \n 3rd Qu.:2.000   3rd Qu.:1.750901   3rd Qu.:0.506681   3rd Qu.:1.6306  \n Max.   :3.100   Max.   :9.688438   Max.   :1.362132   Max.   :2.4973  \n NA's   :24      NA's   :1          NA's   :1          NA's   :1       \n baseflow_index      stream_elas            q5                q95        \n Min.   :0.006858   Min.   :-0.6363   Min.   :0.000000   Min.   : 0.000  \n 1st Qu.:0.397430   1st Qu.: 1.3177   1st Qu.:0.009155   1st Qu.: 2.066  \n Median :0.504923   Median : 1.7006   Median :0.081568   Median : 3.769  \n Mean   :0.491447   Mean   : 1.8322   Mean   :0.171803   Mean   : 5.057  \n 3rd Qu.:0.600345   3rd Qu.: 2.2255   3rd Qu.:0.219522   3rd Qu.: 6.288  \n Max.   :0.977556   Max.   : 6.2405   Max.   :2.424938   Max.   :31.817  \n                    NA's   :1         NA's   :1          NA's   :1       \n  high_q_freq        high_q_dur       low_q_freq       low_q_dur     \n Min.   :  0.000   Min.   : 0.000   Min.   :  0.00   Min.   :  0.00  \n 1st Qu.:  6.412   1st Qu.: 1.821   1st Qu.: 37.44   1st Qu.: 10.00  \n Median : 15.100   Median : 2.848   Median : 96.00   Median : 15.52  \n Mean   : 25.745   Mean   : 6.913   Mean   :107.62   Mean   : 22.28  \n 3rd Qu.: 35.788   3rd Qu.: 7.554   3rd Qu.:162.14   3rd Qu.: 26.91  \n Max.   :172.800   Max.   :92.559   Max.   :356.80   Max.   :209.88  \n NA's   :1         NA's   :1        NA's   :1        NA's   :1       \n  zero_q_freq         hfd_mean    \n Min.   :0.00000   Min.   :112.2  \n 1st Qu.:0.00000   1st Qu.:160.2  \n Median :0.00000   Median :173.8  \n Mean   :0.03415   Mean   :182.5  \n 3rd Qu.:0.00000   3rd Qu.:204.1  \n Max.   :0.96537   Max.   :287.8  \n NA's   :1         NA's   :1      \n\nls(camels)\n\n [1] \"area_gages2\"          \"area_geospa_fabric\"   \"aridity\"             \n [4] \"baseflow_index\"       \"carbonate_rocks_frac\" \"clay_frac\"           \n [7] \"dom_land_cover\"       \"dom_land_cover_frac\"  \"elev_mean\"           \n[10] \"frac_forest\"          \"frac_snow\"            \"gauge_id\"            \n[13] \"gauge_lat\"            \"gauge_lon\"            \"geol_1st_class\"      \n[16] \"geol_2nd_class\"       \"geol_permeability\"    \"geol_porostiy\"       \n[19] \"glim_1st_class_frac\"  \"glim_2nd_class_frac\"  \"gvf_diff\"            \n[22] \"gvf_max\"              \"hfd_mean\"             \"high_prec_dur\"       \n[25] \"high_prec_freq\"       \"high_prec_timing\"     \"high_q_dur\"          \n[28] \"high_q_freq\"          \"lai_diff\"             \"lai_max\"             \n[31] \"low_prec_dur\"         \"low_prec_freq\"        \"low_prec_timing\"     \n[34] \"low_q_dur\"            \"low_q_freq\"           \"max_water_content\"   \n[37] \"organic_frac\"         \"other_frac\"           \"p_mean\"              \n[40] \"p_seasonality\"        \"pet_mean\"             \"q_mean\"              \n[43] \"q5\"                   \"q95\"                  \"root_depth_50\"       \n[46] \"root_depth_99\"        \"runoff_ratio\"         \"sand_frac\"           \n[49] \"silt_frac\"            \"slope_fdc\"            \"slope_mean\"          \n[52] \"soil_conductivity\"    \"soil_depth_pelletier\" \"soil_depth_statsgo\"  \n[55] \"soil_porosity\"        \"stream_elas\"          \"water_frac\"          \n[58] \"zero_q_freq\"         \n\n# Data cleaning\ncamels &lt;- na.omit(camels)\ncamels_clean &lt;- camels %&gt;%\n  filter(complete.cases(select(., aridity, p_mean, q_mean))) %&gt;%\n  select(aridity, p_mean, q_mean, gauge_lat, gauge_lon)\n# Check data for cleanliness\nskim(camels_clean)\n\n\nData summary\n\n\nName\ncamels_clean\n\n\nNumber of rows\n507\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\naridity\n0\n1\n1.13\n0.67\n0.22\n0.73\n0.89\n1.45\n5.21\n▇▃▁▁▁\n\n\np_mean\n0\n1\n3.15\n1.49\n0.64\n2.20\n3.05\n3.70\n8.94\n▅▇▂▁▁\n\n\nq_mean\n0\n1\n1.46\n1.61\n0.00\n0.49\n1.00\n1.72\n9.50\n▇▁▁▁▁\n\n\ngauge_lat\n0\n1\n39.55\n5.21\n27.05\n36.23\n39.35\n43.96\n48.66\n▂▃▇▅▆\n\n\ngauge_lon\n0\n1\n-98.08\n16.26\n-124.39\n-112.03\n-97.04\n-83.40\n-67.94\n▇▆▇▇▅\n\n\n\n\nvis_miss(camels_clean)\n\n\n\n\n\n\n\n\n\n\nVisual Exploratory Data\n\n# Map of q mean of the sites\n\nggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +\n  borders(\"state\", colour = \"gray50\") +\n  geom_point(aes(color = q_mean)) +\n  scale_color_gradient(low = \"lightblue\", high = \"darkblue\") +\n  ggthemes::theme_map()\n\n\n\n\n\n\n\n\n\n\nData Spliting\n\n# Start by splitting the data \n\nset.seed(123)\n\n# Generate the split\n\ncamels_split &lt;- initial_split(camels_clean, prop = 0.8)\ncamels_train &lt;- training(camels_split)\ncamels_test  &lt;- testing(camels_split)\n\n\n\nFeature Engineering\n\n# Create a recipe to preprocess the data\n\nlibrary(recipes)\ncamels_recipe &lt;- recipe(q_mean ~ aridity + p_mean, data = camels_train) %&gt;%\n  step_log(all_numeric_predictors(), base = 10) %&gt;%\n  step_naomit(all_predictors(), all_outcomes())\n\n\nsummary(camels_train)\n\n    aridity           p_mean           q_mean          gauge_lat    \n Min.   :0.2203   Min.   :0.8229   Min.   :0.01189   Min.   :27.05  \n 1st Qu.:0.7426   1st Qu.:2.1150   1st Qu.:0.45655   1st Qu.:35.99  \n Median :0.9065   Median :2.9482   Median :0.98550   Median :39.25  \n Mean   :1.1355   Mean   :3.1247   Mean   :1.44442   Mean   :39.39  \n 3rd Qu.:1.4968   3rd Qu.:3.6802   3rd Qu.:1.69769   3rd Qu.:43.83  \n Max.   :3.8181   Max.   :8.9369   Max.   :9.50311   Max.   :48.59  \n   gauge_lon      \n Min.   :-124.39  \n 1st Qu.:-111.25  \n Median : -96.95  \n Mean   : -97.92  \n 3rd Qu.: -83.88  \n Max.   : -69.31  \n\n\n\n\nResampling and Model Testing\n\n# Build re-samples\n\ncamels_cv &lt;- vfold_cv(camels_train, v = 10)\n\n# Define Three Regression Models  \nlinear_model &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  set_mode(\"regression\")\n\nrf_model &lt;- rand_forest() |&gt; \n  set_engine(\"ranger\") |&gt; \n  set_mode(\"regression\")\n\nxgbm_model &lt;- boost_tree() |&gt; \n  set_engine(\"xgboost\") |&gt; \n  set_mode(\"regression\")\n\n\n# Workflow Set/Map/Auto-plot\nlibrary(workflows)\nlibrary(workflowsets)\nlibrary(tune)\nlibrary(yardstick)\n\nmodel_workflows &lt;- workflow_set(\n  preproc = list(camels_recipe),\n  models = list(\n    linear = linear_model,\n    random_forest = rf_model,\n    xgboost = xgbm_model\n  )\n)\n\nmodel_results &lt;- model_workflows %&gt;%\n  workflow_map(\"fit_resamples\", resamples = camels_cv)\n\nWarning: package 'ranger' was built under R version 4.4.3\n\n\nWarning: package 'xgboost' was built under R version 4.4.3\n\nautoplot(model_results)\n\n\n\n\n\n\n\n# Model Selection with Justification \n\n# Out of the three models, the one that I am going to select that performed the best is the Random Forest model that's set with the ranger engine and regression mode. In our workflow rank it shows that this model had the lowest scores in the mae and rmse but the highest rsq closest to 1 which shows that this model is the best to represent our camels data and predict average streamflow (q_mean) accurately since it's overall a simplistic model with high predictive acccuracy.\n\n\n\nModel Tuning\n\n# Define a tunable model \n\nrf_tune &lt;- rand_forest(\n  mode = \"regression\",\n  mtry = tune(),\n  min_n = tune()\n) %&gt;%\n  set_engine(\"ranger\") %&gt;%\n  set_mode(\"regression\")\n\n# Check the Tunable Values/Ranges\n\ndials &lt;- extract_parameter_set_dials(rf_tune) \ndials$object\n\n[[1]]\n# Randomly Selected Predictors (quantitative)\nRange: [1, ?]\n\n[[2]]\nMinimal Node Size (quantitative)\nRange: [2, 40]\n\nrf_grid &lt;- grid_regular(\n  mtry(range = c(1, 5)),\n  min_n(range = c(2, 10)),\n  levels = 5\n)\nrf_grid\n\n# A tibble: 25 × 2\n    mtry min_n\n   &lt;int&gt; &lt;int&gt;\n 1     1     2\n 2     2     2\n 3     3     2\n 4     4     2\n 5     5     2\n 6     1     4\n 7     2     4\n 8     3     4\n 9     4     4\n10     5     4\n# ℹ 15 more rows\n\n# Create a workflow\n\nrf_workflow &lt;- workflow() %&gt;%\n  add_recipe(camels_recipe) %&gt;%\n  add_model(rf_tune)\n\nrf_tune_results &lt;- rf_workflow %&gt;%\n  tune_grid(\n    resamples = camels_cv,\n    grid = rf_grid\n  )\n\n→ A | warning: 3 columns were requested but there were 2 predictors in the data. 2 will be used.\n\n\nThere were issues with some computations   A: x1\n\n\n→ B | warning: 4 columns were requested but there were 2 predictors in the data. 2 will be used.\n\n\nThere were issues with some computations   A: x1\n→ C | warning: 5 columns were requested but there were 2 predictors in the data. 2 will be used.\nThere were issues with some computations   A: x1\nThere were issues with some computations   A: x3   B: x2   C: x2\nThere were issues with some computations   A: x6   B: x6   C: x5\nThere were issues with some computations   A: x9   B: x8   C: x8\nThere were issues with some computations   A: x12   B: x11   C: x11\nThere were issues with some computations   A: x15   B: x14   C: x14\nThere were issues with some computations   A: x17   B: x17   C: x17\nThere were issues with some computations   A: x21   B: x20   C: x20\nThere were issues with some computations   A: x23   B: x22   C: x22\nThere were issues with some computations   A: x26   B: x25   C: x25\nThere were issues with some computations   A: x29   B: x28   C: x28\nThere were issues with some computations   A: x32   B: x31   C: x31\nThere were issues with some computations   A: x35   B: x34   C: x34\nThere were issues with some computations   A: x37   B: x37   C: x37\nThere were issues with some computations   A: x41   B: x40   C: x40\nThere were issues with some computations   A: x43   B: x43   C: x42\nThere were issues with some computations   A: x46   B: x46   C: x45\nThere were issues with some computations   A: x49   B: x48   C: x48\nThere were issues with some computations   A: x50   B: x50   C: x50\n\nautoplot(rf_tune_results)\n\n\n\n\n\n\n\nrf_wf &lt;- workflow() %&gt;%\n  add_recipe(camels_recipe) %&gt;%\n  add_model(rf_tune)\n\nrf_wf\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: rand_forest()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_log()\n• step_naomit()\n\n── Model ───────────────────────────────────────────────────────────────────────\nRandom Forest Model Specification (regression)\n\nMain Arguments:\n  mtry = tune()\n  min_n = tune()\n\nComputational engine: ranger \n\n# Define Search Space (SFD with 25 predefined combos)\n\ndials &lt;- extract_parameter_set_dials(rf_wf)\n\ndials &lt;- update(dials, mtry = mtry(range = c(1, 10)))\n\ndials &lt;- update(dials, min_n = min_n(range = c(2, 15)))\n\nmy_grid &lt;- grid_space_filling(dials, size = 25)\n\ndials\n\nCollection of 2 parameters for tuning\n\n identifier  type    object\n       mtry  mtry nparam[+]\n      min_n min_n nparam[+]\n\ndials$object\n\n[[1]]\n# Randomly Selected Predictors (quantitative)\nRange: [1, 10]\n\n[[2]]\nMinimal Node Size (quantitative)\nRange: [2, 15]\n\ndials &lt;- extract_parameter_set_dials(rf_workflow)\n\ndials &lt;- finalize(dials, camels_train)\n\nmy.grid &lt;- grid_space_filling(dials, size = 25)\n\nmy.grid\n\n# A tibble: 25 × 2\n    mtry min_n\n   &lt;int&gt; &lt;int&gt;\n 1     1    24\n 2     1    13\n 3     1    33\n 4     1     5\n 5     1    19\n 6     2    27\n 7     2    36\n 8     2    11\n 9     2     3\n10     2    21\n# ℹ 15 more rows\n\n# Tune the Model \n\nmodel_params &lt;-  tune_grid(\n    rf_wf,\n    resamples = camels_cv,\n    grid = my.grid,\n    metrics = metric_set(rmse, rsq, mae),\n    control = control_grid(save_pred = TRUE)\n  )\n\n→ A | warning: 3 columns were requested but there were 2 predictors in the data. 2 will be used.\nThere were issues with some computations   A: x1\n→ B | warning: 4 columns were requested but there were 2 predictors in the data. 2 will be used.\nThere were issues with some computations   A: x1\n→ C | warning: 5 columns were requested but there were 2 predictors in the data. 2 will be used.\nThere were issues with some computations   A: x1\nThere were issues with some computations   A: x5   B: x5   C: x2\nThere were issues with some computations   A: x10   B: x7   C: x5\nThere were issues with some computations   A: x12   B: x10   C: x10\nThere were issues with some computations   A: x16   B: x15   C: x15\nThere were issues with some computations   A: x20   B: x20   C: x19\nThere were issues with some computations   A: x25   B: x24   C: x20\nThere were issues with some computations   A: x29   B: x25   C: x25\nThere were issues with some computations   A: x31   B: x30   C: x30\nThere were issues with some computations   A: x36   B: x35   C: x35\nThere were issues with some computations   A: x40   B: x40   C: x37\nThere were issues with some computations   A: x45   B: x42   C: x40\nThere were issues with some computations   A: x47   B: x45   C: x45\nThere were issues with some computations   A: x50   B: x50   C: x50\n\nautoplot(model_params)\n\n\n\n\n\n\n\n# Describe what you see !\n\n# This autoplot shows six different graphs in relation to rmse, rsq, and mae metric values in randomly selected predictors and minimal node size. For the minimal node size,, we can see the metrics of mae and rmse follow a similar pattern with no outliers which shows that this model is consistent and a good choice.\n\n\n\nCheck the skill of the tuned model\n\n# Check using collect_metric () function\n\nmodel_params %&gt;% collect_metrics()\n\n# A tibble: 75 × 8\n    mtry min_n .metric .estimator  mean     n std_err .config              \n   &lt;int&gt; &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;                \n 1     1    24 mae     standard   0.326    10  0.0120 Preprocessor1_Model01\n 2     1    24 rmse    standard   0.494    10  0.0246 Preprocessor1_Model01\n 3     1    24 rsq     standard   0.904    10  0.0110 Preprocessor1_Model01\n 4     1    13 mae     standard   0.327    10  0.0109 Preprocessor1_Model02\n 5     1    13 rmse    standard   0.493    10  0.0234 Preprocessor1_Model02\n 6     1    13 rsq     standard   0.904    10  0.0108 Preprocessor1_Model02\n 7     1    33 mae     standard   0.335    10  0.0124 Preprocessor1_Model03\n 8     1    33 rmse    standard   0.518    10  0.0302 Preprocessor1_Model03\n 9     1    33 rsq     standard   0.898    10  0.0127 Preprocessor1_Model03\n10     1     5 mae     standard   0.331    10  0.0110 Preprocessor1_Model04\n# ℹ 65 more rows\n\n# Using this function, I can see from the tibble it produced that all metrics are standard with rsq being the highest at 0.9 and mae being the lowest at 0.32 which is good for our model as there is low error and high correlation between variables.\n\n\n# Check using the show_best() function\n\nmodel_params %&gt;%\n  show_best(metric = \"mae\")\n\n# A tibble: 5 × 8\n   mtry min_n .metric .estimator  mean     n std_err .config              \n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;                \n1     1    24 mae     standard   0.326    10  0.0120 Preprocessor1_Model01\n2     2    21 mae     standard   0.327    10  0.0109 Preprocessor1_Model10\n3     1    13 mae     standard   0.327    10  0.0109 Preprocessor1_Model02\n4     5    22 mae     standard   0.327    10  0.0109 Preprocessor1_Model23\n5     1    19 mae     standard   0.327    10  0.0112 Preprocessor1_Model05\n\n# From this function we are able to see that the top five performing models have different amounts of trees and min_n that bring in a mean of 0.32. The best hyper-parameter set is the model 1 with a mtry of 1 and min_n of 24.\n\n# Use the select_best() function to save the best hp\n\nhp_best &lt;- select_best(model_params, metric = \"mae\")\n\nhp_best\n\n# A tibble: 1 × 3\n   mtry min_n .config              \n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;                \n1     1    24 Preprocessor1_Model01\n\n\n\n\nFinalize your model\n\n# Use the Finalize_Workflow () function \n\nfinal_wf &lt;- finalize_workflow(rf_wf, hp_best)\n\nprint(final_wf)\n\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: rand_forest()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_log()\n• step_naomit()\n\n── Model ───────────────────────────────────────────────────────────────────────\nRandom Forest Model Specification (regression)\n\nMain Arguments:\n  mtry = 1\n  min_n = 24\n\nComputational engine: ranger \n\n\n\n\nFinal Model Verification\n\n# Use last_fit() to finalize workflow\n\nfinal_fit &lt;- last_fit(final_wf, camels_split)\n\nfinal_metrics &lt;- collect_metrics(final_fit)\nfinal_metrics\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard       0.443 Preprocessor1_Model1\n2 rsq     standard       0.921 Preprocessor1_Model1\n\n# Interpret the Metrics\n\n# The final model performed very well, similarly to how our random forest model performed with the metrics in standard form of rsq, rmse, and mae, which means it performed well with the test data. The results show that there is a final rmse of 0.4 and a rsq of 0.9 meaning that the predicted values are close to the actual values from the lower rmse metric and 80% of variability in test data due to the high rsq which is a strong model choice. The rsq values being similar on both data sets shows a high correlation for both applications of the model. \n\n\n# Plot Predictions\n\nfinal_predictions &lt;- collect_predictions(final_fit)\nfinal_predictions\n\n# A tibble: 102 × 5\n   .pred id                .row q_mean .config             \n   &lt;dbl&gt; &lt;chr&gt;            &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt;               \n 1  2.03 train/test split     1  2.17  Preprocessor1_Model1\n 2  1.87 train/test split    15  1.86  Preprocessor1_Model1\n 3  2.11 train/test split    17  2.24  Preprocessor1_Model1\n 4  2.08 train/test split    19  2.15  Preprocessor1_Model1\n 5  1.92 train/test split    28  2.03  Preprocessor1_Model1\n 6  1.20 train/test split    37  1.10  Preprocessor1_Model1\n 7  1.24 train/test split    38  1.16  Preprocessor1_Model1\n 8  1.15 train/test split    44  0.990 Preprocessor1_Model1\n 9  1.20 train/test split    46  1.14  Preprocessor1_Model1\n10  1.05 train/test split    47  1.00  Preprocessor1_Model1\n# ℹ 92 more rows\n\nggplot(final_predictions, aes(x = .pred, y = q_mean)) +\n  geom_point(aes(color = \"green\" ), alpha = 0.6) +\n  geom_smooth(method = \"lm\", color = \"pink\", se = FALSE) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"black\") +\n  scale_color_manual(values = c(\"darkgreen\")) +\n  labs(\n    title = \"Predicted vs Actual Values\",\n    x = \"Predicted Streamflow (q_mean)\",\n    y = \"Actual Streamflow (q_mean)\",\n    caption = \"Red line: Linear fit\"\n  ) +\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nBuilding a Map!\n\n# Use the augment() function for predictions\n\nfinal_model &lt;- fit(final_wf, data = camels_clean)\npredictions &lt;- augment(final_model, camels_clean)\n\n\n# Use the mutate() function to get the residuals \n\npredictions &lt;- predictions %&gt;%\n  mutate(residuals = .pred - q_mean)\n\nhead(predictions)\n\n# A tibble: 6 × 7\n  .pred aridity p_mean q_mean gauge_lat gauge_lon residuals\n  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1  2.10   0.587   3.61   2.17      44.6     -67.9  -0.0765 \n2  2.03   0.588   3.52   2.03      45.2     -69.3  -0.00429\n3  1.86   0.629   3.32   2.18      44.9     -70.0  -0.327  \n4  2.18   0.562   3.73   2.41      44.9     -71.1  -0.228  \n5  2.60   0.523   4.07   2.73      44.4     -71.0  -0.128  \n6  2.03   0.599   3.49   2.28      44.6     -70.6  -0.248  \n\n# Map of Predictions \n\npred_map &lt;- ggplot(predictions, aes(x = gauge_lon, y = gauge_lat, color = .pred)) + borders(\"state\", colour = \"black\", fill = NA) +\n  geom_point(alpha = 0.6) +\n  scale_color_gradient(low = \"lightblue\", high = \"darkblue\") +\n  labs(title = \"Predicted Streamflow (q_mean)\", color = \"Predicted Value\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\nprint(pred_map)\n\n\n\n\n\n\n\n# Map of Residuals \n\nresid_map &lt;- ggplot(predictions, aes(x = gauge_lon, y = gauge_lat, color = residuals)) + borders(\"state\", colour = \"black\", fill = NA) +\n  geom_point(alpha = 0.6) +\n  scale_color_viridis_c(option = \"C\") +\n  labs(title = \"Residuals of Predictions (Predicted - Actual)\", color = \"Residuals\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\nprint(resid_map)\n\n\n\n\n\n\n\n# Use patchwork to combine the tw maps into a figure \n\nlibrary(patchwork)\n\ncombined_map &lt;- pred_map + resid_map +\n  plot_layout(ncol = 2, heights = c(6, 6))\n\nprint(combined_map)"
  }
]